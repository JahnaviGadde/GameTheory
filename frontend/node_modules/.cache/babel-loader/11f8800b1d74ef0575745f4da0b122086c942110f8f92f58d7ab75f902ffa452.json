{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Dell\\\\Desktop\\\\Game Theory task\\\\frontend\\\\src\\\\components\\\\CourtSchedule.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect } from \"react\";\nimport \"./Slotstable.css\";\nimport { useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function CourtSchedule() {\n  _s();\n  const today = new Date();\n  const formattedToday = today.toISOString().split(\"T\")[0];\n  const [selectedDate, setSelectedDate] = useState(formattedToday);\n  const [courts, setCourts] = useState({});\n  const {\n    centreId\n  } = useParams();\n  const handleDateChange = e => {\n    setSelectedDate(e.target.value);\n  };\n  useEffect(() => {\n    const fetchCourts = async () => {\n      const response = await axios.get(`${process.env.REACT_APP_BACKENDAPI}/api/court/centre/${centreId}`);\n      setCentres(response.data);\n    };\n    fetchCourts();\n  }, []);\n  const times = ['5:00 AM - 6:00 AM', '6:00 AM - 7:00 AM', '7:00 AM - 8:00 AM', '8:00 AM - 9:00 AM', '9:00 AM - 10:00 AM', '10:00 AM - 11:00 AM', '11:00 AM - 12:00 PM', '12:00 PM - 1:00 PM', '1:00 PM - 2:00 PM', '2:00 PM - 3:00 PM', '3:00 PM - 4:00 PM', '4:00 PM - 5:00 PM', '5:00 PM - 6:00 PM', '6:00 PM - 7:00 PM', '7:00 PM - 8:00 PM', '8:00 PM - 9:00 PM', '9:00 PM - 10:00 PM', '10:00 PM - 11:00 PM', '11:00 PM - 12:00 AM'];\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"court-schedule\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"date-selector\",\n      children: /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"date\",\n        value: selectedDate,\n        onChange: handleDateChange,\n        className: \"calendar-input\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n      className: \"schedule-table\",\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"th\", {\n            className: \"fixed-column\",\n            children: \"Court / Time\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 46,\n            columnNumber: 13\n          }, this), times.map((time, index) => /*#__PURE__*/_jsxDEV(\"th\", {\n            children: time\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 48,\n            columnNumber: 15\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: courts.map((court, index) => /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"td\", {\n            className: \"court-name fixed-column\",\n            children: court.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 55,\n            columnNumber: 15\n          }, this), times.map((time, i) => {\n            const slot = court.slots.find(slot => slot.time === time);\n            return /*#__PURE__*/_jsxDEV(\"td\", {\n              className: slot ? \"filled-slot\" : \"empty-slot\",\n              children: slot ? slot.event : \"\"\n            }, i, false, {\n              fileName: _jsxFileName,\n              lineNumber: 59,\n              columnNumber: 19\n            }, this);\n          })]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 11\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 5\n  }, this);\n}\n_s(CourtSchedule, \"hc0nCIka+0HXAluKVeZ5R5rh59A=\", false, function () {\n  return [useParams];\n});\n_c = CourtSchedule;\n;\nvar _c;\n$RefreshReg$(_c, \"CourtSchedule\");","map":{"version":3,"names":["React","useEffect","useState","useParams","jsxDEV","_jsxDEV","CourtSchedule","_s","today","Date","formattedToday","toISOString","split","selectedDate","setSelectedDate","courts","setCourts","centreId","handleDateChange","e","target","value","fetchCourts","response","axios","get","process","env","REACT_APP_BACKENDAPI","setCentres","data","times","className","children","type","onChange","fileName","_jsxFileName","lineNumber","columnNumber","map","time","index","court","name","i","slot","slots","find","event","_c","$RefreshReg$"],"sources":["C:/Users/Dell/Desktop/Game Theory task/frontend/src/components/CourtSchedule.jsx"],"sourcesContent":["import React, { useEffect } from \"react\";\r\nimport \"./Slotstable.css\";\r\nimport { useState } from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\n\r\nexport default function CourtSchedule (){\r\n\r\n  const today = new Date();\r\n  const formattedToday = today.toISOString().split(\"T\")[0];\r\n  const [selectedDate, setSelectedDate] = useState(formattedToday);\r\n  const [courts , setCourts] = useState({});\r\n\r\n  const { centreId } = useParams();\r\n\r\n  const handleDateChange = (e) => {\r\n    setSelectedDate(e.target.value);\r\n  };\r\n\r\n  useEffect(() => {\r\n    const fetchCourts = async () => {\r\n        const response = await axios.get(`${process.env.REACT_APP_BACKENDAPI}/api/court/centre/${centreId}`);\r\n        setCentres(response.data);\r\n    };\r\n\r\n    fetchCourts();\r\n  }, []);\r\n\r\n  const times = ['5:00 AM - 6:00 AM','6:00 AM - 7:00 AM', '7:00 AM - 8:00 AM', '8:00 AM - 9:00 AM', '9:00 AM - 10:00 AM', '10:00 AM - 11:00 AM', \r\n    '11:00 AM - 12:00 PM', '12:00 PM - 1:00 PM', '1:00 PM - 2:00 PM', '2:00 PM - 3:00 PM', '3:00 PM - 4:00 PM',\r\n    '4:00 PM - 5:00 PM', '5:00 PM - 6:00 PM', '6:00 PM - 7:00 PM', '7:00 PM - 8:00 PM', '8:00 PM - 9:00 PM', '9:00 PM - 10:00 PM', '10:00 PM - 11:00 PM', '11:00 PM - 12:00 AM'];\r\n\r\n\r\n  return (\r\n    <div className=\"court-schedule\">\r\n        <div className=\"date-selector\">\r\n            <input\r\n              type=\"date\"\r\n              value={selectedDate}\r\n              onChange={handleDateChange}\r\n              className=\"calendar-input\"\r\n            />\r\n          </div>\r\n          <table className=\"schedule-table\">\r\n        <thead>\r\n          <tr>\r\n            <th className=\"fixed-column\">Court / Time</th>\r\n            {times.map((time, index) => (\r\n              <th key={index}>{time}</th>\r\n            ))}\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {courts.map((court, index) => (\r\n            <tr key={index}>\r\n              <td className=\"court-name fixed-column\">{court.name}</td>\r\n              {times.map((time, i) => {\r\n                const slot = court.slots.find((slot) => slot.time === time);\r\n                return (\r\n                  <td key={i} className={slot ? \"filled-slot\" : \"empty-slot\"}>\r\n                    {slot ? slot.event : \"\"}\r\n                  </td>\r\n                );\r\n              })}\r\n            </tr>\r\n          ))}\r\n        </tbody>\r\n      </table>\r\n    </div>\r\n  );\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}